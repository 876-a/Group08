from flaskr.bullymail import *
import pytest
import os

# BULLY MAIL #

# Testing valid password with bad emails
@pytest.mark.parametrize("sender", ["400testss@gmail.com", "childer", None, 1])
def test_sendmail_baduser(sender):
    PASS_KEY = os.environ['PASS_KEY']
    USER_KEY = os.environ['USER_KEY']

    # Assign data
    receiver = USER_KEY
    bodytext = "This is a CI test generated by pytest..."
    subject = "Continuous Integration test"
    files = None

    bullyObj = BullyMail(receiver, subject, bodytext, files)
    result = bullyObj.compose(sender, PASS_KEY)

    assert result is False


# Testing valid sender with invalid passwords
@pytest.mark.parametrize("password", ["12345", "qwerty", None])
def test_sendmail_badpassword(password):
    USER_KEY = os.environ['USER_KEY']

    # Assign data
    receiver = USER_KEY
    bodytext = "This is a CI test generated by pytest..."
    subject = "Continuous Integration test"
    files = [""]

    bullyObj = BullyMail(receiver, subject, bodytext, files)
    result = bullyObj.compose(USER_KEY, password)

    assert result is False


# Testing email
def test_sendmail():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Assign data
    receiver = USER_KEY
    bodytext = "This is a CI test generated by pytest..."
    subject = "Continuous Integration test"
    files = [""]

    bullyObj = BullyMail(receiver, subject, bodytext, files)
    result = bullyObj.compose(USER_KEY, PASS_KEY)

    assert result is True


# Testing valid password with bad emails
@pytest.mark.parametrize("sender", ["400testss@gmail.com", "childer", None, 1])
def test_savedraft_baduser(sender):
    PASS_KEY = os.environ['PASS_KEY']
    USER_KEY = os.environ['USER_KEY']

    # Assign data
    receiver = USER_KEY
    bodytext = "This is a CI draft generated by pytest..."
    subject = "Continuous Integration draft"
    files = None

    bullyObj = BullyMail(receiver, subject, bodytext, files)
    result = bullyObj.save(sender, PASS_KEY)

    assert result is False


# Testing valid sender with invalid passwords
@pytest.mark.parametrize("password", ["12345", "qwerty", None])
def test_savedraft_badpassword(password):
    USER_KEY = os.environ['USER_KEY']

    # Assign data
    receiver = USER_KEY
    bodytext = "This is a CI draft generated by pytest..."
    subject = "Continuous Integration draft"
    files = [""]

    bullyObj = BullyMail(receiver, subject, bodytext, files)
    result = bullyObj.save(USER_KEY, password)

    assert result is False


# Testing drafts
def test_savedraft():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Assign data
    receiver = USER_KEY
    bodytext = "This is a CI draft generated by pytest..."
    subject = "Continuous Integration draft"
    files = [""]

    bullyObj = BullyMail(receiver, subject, bodytext, files)
    result = bullyObj.save(USER_KEY, PASS_KEY)

    assert result is True

# BULLY MAIL #

# USER *

# Testing valid password with bad user
@pytest.mark.parametrize("sender", ["400testss@gmail.com", "childer", None, 1])
def test_validate_badusername(sender):
    PASS_KEY = os.environ['PASS_KEY']

    # Pass in a valid password but bad username
    userObj = User(sender, PASS_KEY)
    result = userObj.validate()

    assert result is not None

# Testing valid user with invalid passwords
@pytest.mark.parametrize("password", ["12345", "qwerty", None])
def test_validate_badpassword(password):
    USER_KEY = os.environ['USER_KEY']

    # Pass in a valid username but bad password
    userObj = User(USER_KEY, password)
    result = userObj.validate()

    assert result is not None


# Test the validate function
def test_validate():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Pass in a valid login
    userObj = User(USER_KEY, PASS_KEY)
    result = userObj.validate()

    assert result is None


# Test the inbox fetch.
def test_inbox_fetch():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Assign the user's credentials.
    userObj = User(USER_KEY, PASS_KEY)

    # This function should always return something.
    result = userObj.fetch_inbox(0)

    assert result


# Test the drafts fetch.
def test_drafts_fetch():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Assign the user's credentials.
    userObj = User(USER_KEY, PASS_KEY)

    # This function should always return something.
    result = userObj.fetch_drafts(0)

    assert result


# Test the inbox search.
def test_inbox_search():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Assign the user's credentials.
    userObj = User(USER_KEY, PASS_KEY)

    # This function should always return something.
    result = userObj.search_inbox("")

    assert result


# Test the inbox search.
def test_drafts_search():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Assign the user's credentials.
    userObj = User(USER_KEY, PASS_KEY)

    # This function should always return something.
    result = userObj.search_drafts("")

    assert result


# Test the mail processing.
def test_process_mail():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Assign the user's credentials.
    userObj = User(USER_KEY, PASS_KEY)

    # This function should always return something.
    result = userObj.process_message(1)

    assert result


# Test the mail processing.
def test_process_draft():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Assign the user's credentials.
    userObj = User(USER_KEY, PASS_KEY)

    # This function should always return something.
    result = userObj.process_draft(1)

    assert result


# Test the mail processing.
def test_subject_fetch():
    USER_KEY = os.environ['USER_KEY']
    PASS_KEY = os.environ['PASS_KEY']

    # Assign the user's credentials.
    userObj = User(USER_KEY, PASS_KEY)

    # This function should always return something.
    result = userObj.fetch_subject("imap.gmail.com", 1)

    assert result


def test_search_no_user(client):
    process_search_url_link = "/process/inbox/search"
    response = client.post(process_search_url_link, data=dict(search=""))

    assert response.status_code == 302
    assert response.location == "http://localhost/"


# TODO: Write tests for searching with invalid user credientials
# May have to fix the code for tests to work


def test_forward_no_user(client):
    response = client.get("/forward/0")
    assert response.status_code == 302
    assert response.location == "http://localhost/"

# TODO: Write tests for forwarding with invalid user credientials
# May have to fix the code for tests to work
